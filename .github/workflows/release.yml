name: release

on:
  schedule:
  - cron: '0 18 * * *'
  push:
    branches: [ master, test ]
  workflow_dispatch:

env:
  llvm_ver: 12.0.1
  ninja_ver: 1.10.2

jobs:
  ubuntu:
    runs-on: ubuntu-20.04
    outputs:
      winscp_ver: ${{ steps.winscp.outputs.version }}
      putty_ver: ${{ steps.putty.outputs.version }}
      mobaxterm_ver: ${{ steps.mobaxterm.outputs.version }}
      tig_ver: ${{ steps.tig.outputs.version }}
      astyle_ver: ${{ steps.astyle.outputs.version }}
    env:
      WINSCP_VER: ${{ secrets.WINSCP_VER }}
    steps:
      -
        name: Init Env
        run: |
          sudo apt-get update
          sudo apt install -y automake
          mkdir -p ~/tools
          echo $PATH
      -
        name: Build make 3.82
        run: |
          wget -qOmake.tgz https://ftp.gnu.org/gnu/make/make-3.82.tar.gz
          tar xzvf make.tgz
          cd make-3.82
          sed -i 's/# if _GNU_GLOB_INTERFACE_VERSION == GLOB_INTERFACE_VERSION/# if _GNU_GLOB_INTERFACE_VERSION >= GLOB_INTERFACE_VERSION/' glob/glob.c
          ./configure --prefix=/opt/make_3.8.2
          make -j && make install
          cd /opt/make_3.8.2/bin
          ./make --version
          XZ_OPT=-9 tar cJvf ~/tools/make_3.8.2_linux_amd64.txz /opt/make_3.8.2
      -
        name: Build ctags
        id: ctags
        run: |
          sudo apt-get install -y locales-all

          echo "install libxml2 2.9.12"
          wget -qOlibxml2.tgz https://github.com/GNOME/libxml2/archive/refs/tags/v2.9.12.tar.gz
          tar xzf libxml2.tgz
          cd libxml2-*
          ./autogen.sh --prefix=/usr/local \
                  --sysconfdir=/etc --localstatedir=/var --runstatedir=/run \
                  --disable-option-checking --disable-silent-rules --disable-maintainer-mode --disable-dependency-tracking
          make -j && sudo make install

          echo "build ctags latest"
          git clone https://github.com/universal-ctags/ctags
          cd ctags
          ./autogen.sh
          ./configure --enable-static CFLAGS="-s -Os"
          make -j
          chmod a+x ./ctags
          ./ctags --version
          ldd ./ctags || true
          XZ_OPT=-9 tar cJvf ~/tools/ctags_linux_amd64.txz ctags
      -
        name: Build astyle
        id: astyle
        run: |
          echo "build astyle latest"
          git clone https://gitlab.com/saalen/astyle.git
          cd astyle

          release=$(git tag | grep release)
          ver=${release%_release}
          git checkout $release

          cd AStyle
          mkdir out && cd $_
          cmake ../ -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-static"
          make -j

          chmod a+x ./astyle
          ./astyle --version
          ldd ./astyle || true
          XZ_OPT=-9 tar cJvf ~/tools/astyle_linux_amd64.txz astyle

          echo "version=$ver" >> $GITHUB_OUTPUT
      -
        name: Build tig
        id: tig
        run: |
          echo "install ncursesw 6.3"
          # https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.3.tar.gz
          wget -qOncurses.tgz https://mirrors.aliyun.com/gnu/ncurses/ncurses-6.3.tar.gz
          tar xzf ncurses.tgz
          cd ncurses-*
          ./configure --prefix=/usr/local \
                  --enable-widec --enable-pc-files --with-terminfo-dirs='/etc/terminfo:/lib/terminfo:/usr/share/terminfo' \
                  --without-debug --without-tests
          make -j && sudo make install
          cd -

          echo "install readline 8.1"
          # https://ftp.gnu.org/gnu/readline/readline-8.1.tar.gz
          wget -qOreadline.tgz https://mirrors.aliyun.com/gnu/readline/readline-8.1.tar.gz
          tar xzf readline.tgz
          cd readline-*
          ./configure --prefix=/usr/local
          make -j && sudo make install
          cd -

          ver=$(curl -sv "https://github.com/PCRE2Project/pcre2/releases/latest" 2>&1 | grep -P location: | grep -Po "\d+\.\d+")
          echo "install pcre2 $ver"
          wget -qOpcre2.tgz https://github.com/PCRE2Project/pcre2/releases/download/pcre2-$ver/pcre2-$ver.tar.gz
          tar xzf pcre2.tgz
          cd pcre2-*
          ./configure --prefix=/usr/local \
              --build=x86_64-linux-gnu --sysconfdir=/etc --localstatedir=/var \
              --disable-option-checking --disable-silent-rules \
              --disable-maintainer-mode --disable-dependency-tracking --enable-pcre2-16 --enable-pcre2-32 \
              --disable-pcre2grep-callout
          make -j && sudo make install
          cd -

          echo "build tig latest release"
          ver=$(curl -sv "https://github.com/jonas/tig/releases/latest" 2>&1 | grep -P location: | grep -Po "(\d+\.){2}\d+")
          #ver=2.5.4
          wget -qOtig.tgz https://github.com/jonas/tig/releases/download/tig-$ver/tig-$ver.tar.gz
          tar xzf tig.tgz
          cd tig-*
          ./autogen.sh
          ./configure LIBS=-pthread LDFLAGS="-static -L/usr/local/lib" CPPFLAGS="-I/usr/local/include"
          make -j
          cp src/tig .
          chmod a+x ./tig
          ./tig --version
          ldd ./tig || true
          XZ_OPT=-9 tar cJvf ~/tools/tig_linux_amd64.txz tig
          echo "version=$ver" >> $GITHUB_OUTPUT
      -
        name: Get putty
        id: putty
        run: |
          ver=$(curl -s "https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" | grep -Po "(?<=latest release \()\d\.\d+" | head -1)
          mkdir -p putty && cd $_
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/psftp.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/puttytel.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/pageant.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/puttygen.exe
          7z -mx9 a ~/tools/putty_${ver}.zip ../putty
          echo "version=$ver" >> $GITHUB_OUTPUT
      -
        name: Get MobaXterm
        id: mobaxterm
        run: |
          moba_link=$(curl -s https://mobaxterm.mobatek.net/download-home-edition.html | grep -Po "https:.*?Portable.*?\.zip" | head -1)
          ver=$(echo $moba_link | grep -Po "\d+\.\d+")
          wget -q $moba_link
          7z x MobaXterm*.zip -oMobaXterm
          mv MobaXterm/MobaXterm* MobaXterm/MobaXterm.exe
          7z -mx9 a ~/tools/MobaXterm_${ver}.zip ./MobaXterm
          echo "version=$ver" >> $GITHUB_OUTPUT
      -
        name: Get winscp
        id: winscp
        run: |
          ver=$(curl -s "https://github.com/winscp/winscp/tags" | grep -Po "(?<=tags/)(\d+\.){2}\d+(?=\.zip)" | head -1)
          mkdir -p winscp && cd $_
          echo "version=$ver" >> $GITHUB_OUTPUT

          if [ "$WINSCP_VER" != "0" ]; then
              ver=$WINSCP_VER
          fi

          wget -Owinscp.zip https://winscp.net/download/WinSCP-${ver}-Portable.zip
          unzip winscp.zip && rm winscp.zip
          7z -mx9 a ~/tools/winscp_${ver}.zip ../winscp
      -
        uses: actions/upload-artifact@v3
        with:
          name: tools
          path: ~/tools
          retention-days: 1

  clangd:
    runs-on: ubuntu-20.04
    outputs:
      clangd_ver: ${{ steps.clangd.outputs.version }}
    steps:
      - name: Init env
        run: |
          mkdir -p ~/tools

          wget -qOninja.zip https://github.com/ninja-build/ninja/releases/download/v${ninja_ver}/ninja-linux.zip
          7z x ninja.zip
          sudo mv ninja /usr/local/bin
          ninja --version

          sudo apt-get update
          sudo apt-get install -y libz-dev libzstd-dev libc-ares-dev
          clang++ --version
          cmake --version

      - name: Build clangd clang-format
        id: clangd
        run: |
          #ver=$(curl -s "https://github.com/llvm/llvm-project/releases/latest" | grep -Po "(\d+\.){2}\d+")
          #src_link="https://github.com/llvm/llvm-project/releases/download/llvmorg-$ver/llvm-project-$ver.src.tar.xz"
          #wget -qOllvm.txz $src_link
          #tar xJf llvm.txz
          #cd llvm-project-*

          git clone https://github.com/llvm/llvm-project --depth 1
          cd llvm-project

          # build clangd
          cmake -S llvm -B Release -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_TARGETS_TO_BUILD="X86" \
                -DLLVM_ENABLE_ASSERTIONS=OFF \
                -DLLVM_ENABLE_BACKTRACES=ON \
                -DLLVM_ENABLE_TERMINFO=OFF \
                -DCLANG_PLUGIN_SUPPORT=OFF \
                -DLLVM_ENABLE_PLUGINS=OFF \
                -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
                -DCMAKE_C_COMPILER=clang \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
                -DCMAKE_C_FLAGS_RELEASE="-gline-tables-only -DNDEBUG -Os" \
                -DCMAKE_CXX_FLAGS_RELEASE="-gline-tables-only -DNDEBUG -Os" \
                -DLLVM_ENABLE_ZLIB=OFF \
                -DLLVM_ENABLE_ZSTD=FORCE_ON \
                -DLLVM_USE_STATIC_ZSTD=TRUE \
                -DLLVM_BUILD_STATIC=OFF \
                -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-static-libgcc -Wl,-s -Wl,-rpath=../lib/clang"

                #-DLLVM_BUILD_STATIC=ON \
                #-DCMAKE_EXE_LINKER_FLAGS_RELEASE="-Wl,-s"
                #-DLLVM_BUILD_STATIC=OFF \
                #-DCMAKE_EXE_LINKER_FLAGS_RELEASE="-static-libgcc -Wl,-s -Wl,-rpath=../lib/clang"


          ninja -C Release clangd
          ldd Release/bin/clangd && du -b $_ && chmod +x $_
          rm -rf ./bin ./lib
          mkdir -p bin lib/clang

          cp -r Release/lib/clang lib/

          #mv Release/bin/clangd bin/
          mv Release/bin/clangd bin/clangd_origin
          ldd bin/clangd_origin | grep -Po "/lib64/ld-linux.*\.so\.\d+" | xargs -i cp -v {} lib/clang/ld.so
          ldd bin/clangd_origin | grep -Po "/lib/x86.*\.so\.\d+" | xargs -i cp -v {} lib/clang/
          {
            echo "#!/usr/bin/env bash"
            echo 'cd "$(dirname $(readlink -f $0))"'
            echo 'exec ../lib/clang/ld.so ./clangd_origin $@'
          } > bin/clangd
          chmod +x bin/clangd

          ver=$(./bin/clangd --version | grep -Po "\d+\.\d+\.\d+")
          echo "version=$ver" >> $GITHUB_OUTPUT

          mkdir clangd && mv bin lib $_
          XZ_OPT=-9 tar cJvf ~/tools/clangd_linux_amd64.txz clangd

          # build clang-format
          cmake -S llvm -B Release -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_TARGETS_TO_BUILD="X86" \
                -DLLVM_ENABLE_ASSERTIONS=OFF \
                -DLLVM_ENABLE_BACKTRACES=ON \
                -DLLVM_ENABLE_TERMINFO=OFF \
                -DCLANG_PLUGIN_SUPPORT=OFF \
                -DLLVM_ENABLE_PLUGINS=OFF \
                -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
                -DCMAKE_C_COMPILER=clang \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
                -DCMAKE_C_FLAGS_RELEASE="-gline-tables-only -DNDEBUG -Os" \
                -DCMAKE_CXX_FLAGS_RELEASE="-gline-tables-only -DNDEBUG -Os" \
                -DLLVM_ENABLE_ZLIB=OFF \
                -DLLVM_ENABLE_ZSTD=FORCE_ON \
                -DLLVM_USE_STATIC_ZSTD=TRUE \
                -DLLVM_BUILD_STATIC=ON \
                -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-Wl,-s"

          ninja -C Release clang-format
          ldd Release/bin/clang-format && du -b $_ && chmod +x $_
          rm -rf ./bin ./lib
          mkdir -p bin lib/clang

          mv Release/bin/clang-format bin/
          #mv Release/bin/clang-format bin/clang-format_origin
          #ldd bin/clang-format_origin | grep -Po "/lib64/ld-linux.*\.so\.\d+" | xargs -i cp -v {} lib/clang/ld.so
          #ldd bin/clang-format_origin | grep -Po "/lib/x86.*\.so\.\d+" | xargs -i cp -v {} lib/clang/
          #{
            #echo "#!/usr/bin/env bash"
            #echo 'cd "$(dirname $(readlink -f $0))"'
            #echo 'exec ../lib/clang/ld.so ./clang-format_origin $@'
          #} > bin/clang-format
          #chmod +x bin/clang-format

          mkdir clang_format && mv bin lib $_
          XZ_OPT=-9 tar cJvf ~/tools/clang_format_linux_amd64.txz clang_format

      - uses: actions/upload-artifact@v3
        with:
          name: tools
          path: ~/tools
          retention-days: 1

  ccls:
    runs-on: ubuntu-20.04
    steps:
      - name: Download llvm
        run: |
          mkdir -p ~/tools
          wget -qOllvm.tar.xz "https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvm_ver}/clang+llvm-${llvm_ver}-x86_64-linux-gnu-ubuntu-16.04.tar.xz"
          tar xJf llvm.tar.xz
          pwd && ls
          mv clang* llvm
      - name: Download ccls
        run: |
          wget -qOninja.zip https://github.com/ninja-build/ninja/releases/download/v${ninja_ver}/ninja-linux.zip
          7z x ninja.zip
          sudo mv ninja /usr/local/bin
          ninja --version

          cat /proc/cpuinfo | grep processor
          cmake --version
          g++ --version
          git clone --recursive https://github.com/MaskRay/ccls
      - name: Build ccls
        run: |
          cd ccls

          # /usr/bin/ld: cannot find -lgcc_s
          sed 's/project(ccls LANGUAGES CXX C)/project(ccls LANGUAGES CXX)/' -i CMakeLists.txt

          #cmake -S. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=../llvm -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++"
          cmake -S. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=../llvm -DCMAKE_CXX_FLAGS="-static -pthread -lrt -ldl -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -Os -s -flto"
          ninja -C Release

          mv Release/ccls .
          chmod a+x ./ccls
          ./ccls --version
          ldd ./ccls || true
          XZ_OPT=-9 tar cJvf ~/tools/ccls_linux_amd64.txz ccls
      - uses: actions/upload-artifact@v3
        with:
          name: tools
          path: ~/tools
          retention-days: 1

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
      - name: Download llvm
        run: |
          cd /d c:\
          curl -L -ollvm.7z https://github.com/fcying/tools/releases/download/llvm-v${{ env.llvm_ver }}/llvm_msvc.7z
          7z x llvm.7z
          dir
      - name: Build ccls
        run: |
          git clone --depth=1 --recursive https://github.com/MaskRay/ccls
          cd ccls
          cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_PREFIX_PATH="c:/llvm/Release"
          ninja -C Release

          .\Release\ccls.exe --version
          mkdir ccls
          copy Release\ccls.exe .\ccls\
          copy c:\Windows\System32\vcruntime140_1.dll .\ccls\
          copy c:\Windows\System32\vcruntime140.dll .\ccls\
          copy c:\Windows\System32\msvcp140.dll .\ccls\

          7z -mx9 a ..\ccls_windows_amd64.zip ccls
      - uses: actions/upload-artifact@v3
        with:
          name: tools
          path: ./ccls_windows_amd64.zip
          retention-days: 1

  publish:
    #needs: [ubuntu]
    needs: [ubuntu, clangd, ccls, windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Download data
        run: ls -la

      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITEE_KEY: ${{ secrets.GITEE_KEY }}
        run: |
          {
            echo "* clangd ${{ needs.clangd.outputs.clangd_ver }} nightly with rpath lib"
            echo "* clang-format ${{ needs.clangd.outputs.clangd_ver }} nightly static"
            echo "* ccls nightly static"
            echo "build with llvm ${{ env.llvm_ver }}"
            echo "* ctags nightly static"
            echo "* tig ${{ needs.ubuntu.outputs.tig_ver }} static"
            echo "* astyle ${{ needs.ubuntu.outputs.astyle_ver }} static"
            echo "* make 3.8.2"
            echo "* putty ${{ needs.ubuntu.outputs.putty_ver }}"
            echo "* MobaXterm ${{ needs.ubuntu.outputs.mobaxterm_ver }}"
            echo "* winscp ${{ needs.ubuntu.outputs.winscp_ver }}"
          } | tee /tmp/note.md
          gh release delete tools -y || true
          git push origin :tools || true
          gh release create tools -t "tools" -F "/tmp/note.md" --target $GITHUB_SHA ./tools/*
