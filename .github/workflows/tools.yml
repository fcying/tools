name: tools

on:
  schedule:
  - cron: '0 18 * * *'
  push:
    branches: [ master, test ]
  workflow_dispatch:

env:
  llvm_ver: 12.0.1

jobs:
  ubuntu2004:
    runs-on: ubuntu-20.04
    outputs:
      winscp_ver: ${{ steps.winscp.outputs.version }}
      putty_ver: ${{ steps.putty.outputs.version }}
      mobaxterm_ver: ${{ steps.mobaxterm.outputs.version }}
      tig_ver: ${{ steps.tig.outputs.version }}
    steps:
      - name: Build ctags
        id: ctags
        run: |
          sudo apt-get install -y locales-all
          sudo apt-get remove -y libxml2-dev    #static build failed

          git clone https://github.com/universal-ctags/ctags
          cd ctags
          ./autogen.sh
          ./configure --enable-static=yes
          make -j
          chmod a+x ./ctags
          7z -mx9 a ~/tools/ctags_linux_amd64.zip ./ctags

      - name: Build tig
        id: tig
        run: |
          # remove system ncurses
          sudo apt-get remove -y libncurses-dev

          # install ncursesw
          # https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.3.tar.gz
          wget -qOncurses.tgz https://mirrors.aliyun.com/gnu/ncurses/ncurses-6.3.tar.gz
          tar xzf ncurses.tgz
          cd ncurses-*
          ./configure --enable-widec --enable-pc-files --with-terminfo-dirs="/etc/terminfo:/lib/terminfo:/usr/share/terminfo" --without-debug --without-tests
          make
          sudo make install
          cd -

          # install readline
          # https://ftp.gnu.org/gnu/readline/readline-8.1.tar.gz
          wget -qOreadline.tgz https://mirrors.aliyun.com/gnu/readline/readline-8.1.tar.gz
          tar xzf readline.tgz
          cd readline-*
          ./configure
          make
          sudo make install
          cd -

          ver=$(curl -s "https://github.com/jonas/tig/releases/latest" | grep -Po "(\d+\.){2}\d+")
          wget -qOtig.tgz https://github.com/jonas/tig/releases/download/tig-$ver/tig-$ver.tar.gz
          tar xzf tig.tgz
          cd tig-*
          ./configure LDFLAGS=-static
          make
          cd src
          chmod a+x ./tig
          7z -mx9 a ~/tools/tig_${ver}.zip ./tig
          echo "::set-output name=version::$ver"

      - name: Get winscp
        id: winscp
        run: |
          ver=$(curl -s "https://github.com/winscp/winscp/tags" | grep -Po "(?<=tags/)(\d+\.){2}\d+(?=\.zip)" | head -1)
          mkdir -p winscp && cd $_
          wget -qOwinscp.zip https://jaist.dl.sourceforge.net/project/winscp/WinSCP/${ver}/WinSCP-${ver}-Portable.zip
          unzip winscp.zip && rm winscp.zip
          7z -mx9 a ~/tools/winscp_${ver}.zip ../winscp
          echo "::set-output name=version::$ver"

      - name: Get putty
        id: putty
        run: |
          ver=$(curl -s "https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" | grep -Po "(?<=latest release \()\d\.\d+" | head -1)
          mkdir -p putty && cd $_
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/psftp.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/puttytel.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/pageant.exe
          wget -q https://the.earth.li/~sgtatham/putty/latest/w64/puttygen.exe
          7z -mx9 a ~/tools/putty_${ver}.zip ../putty
          echo "::set-output name=version::$ver"

      - name: Get MobaXterm
        id: mobaxterm
        run: |
          moba_link=$(curl -s https://mobaxterm.mobatek.net/download-home-edition.html | grep -Po "https:.*?Portable.*?\.zip" | head -1)
          ver=$(echo $moba_link | grep -Po "\d+\.\d+")
          wget -q $moba_link
          7z x MobaXterm*.zip -oMobaXterm
          mv MobaXterm/MobaXterm* MobaXterm/MobaXterm.exe
          7z -mx9 a ~/tools/MobaXterm_${ver}.zip ./MobaXterm
          echo "::set-output name=version::$ver"

      - uses: actions/upload-artifact@v2
        with:
          name: tools
          path: ~/tools
          retention-days: 1

  ccls:
    runs-on: ubuntu-20.04
    steps:
      - name: Download llvm
        run: |
          mkdir -p ~/tools
          wget -qOllvm.tar.xz "https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvm_ver}/clang+llvm-${llvm_ver}-x86_64-linux-gnu-ubuntu-16.04.tar.xz"
          tar xJf llvm.tar.xz
          pwd && ls
          mv clang* llvm
      - name: Build ccls
        run: |
          cat /proc/cpuinfo | grep processor
          git clone --recursive https://github.com/MaskRay/ccls
          cd ccls

          # /usr/bin/ld: cannot find -lgcc_s
          sed 's/project(ccls LANGUAGES CXX C)/project(ccls LANGUAGES CXX)/' -i CMakeLists.txt

          #cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=../llvm -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++"
          cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=../llvm -DCMAKE_CXX_FLAGS="-static -pthread -lrt -ldl -Wl,--whole-archive -lpthread -Wl,--no-whole-archive"
          cmake --build Release

          mv Release/ccls .
          chmod a+x ./ccls
          7z -mx9 a ~/tools/ccls_linux_amd64.zip ./ccls
      - uses: actions/upload-artifact@v2
        with:
          name: tools
          path: ~/tools
          retention-days: 1

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
      - name: Download llvm
        run: |
          cd /d c:\
          curl -L -ollvm.7z https://github.com/fcying/tools/releases/download/llvm-v${{ env.llvm_ver }}/llvm_msvc.7z
          7z x llvm.7z
          dir
      - name: Build ccls
        run: |
          git clone --depth=1 --recursive https://github.com/MaskRay/ccls
          cd ccls
          cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_PREFIX_PATH="c:/llvm/Release"
          ninja -C Release

          mkdir ccls
          copy Release\ccls.exe .\ccls\
          copy c:\Windows\System32\vcruntime140_1.dll .\ccls\
          copy c:\Windows\System32\vcruntime140.dll .\ccls\
          copy c:\Windows\System32\msvcp140.dll .\ccls\

          7z -mx9 a ..\ccls_windows_amd64.zip ccls
      - uses: actions/upload-artifact@v2
        with:
          name: tools
          path: ./ccls_windows_amd64.zip
          retention-days: 1

  publish:
    #needs: [ubuntu2004]
    needs: [ubuntu2004, ccls, windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Download data
        run: ls -la

      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          {
            echo "* ccls nightly static"
            echo "build with llvm ${{ env.llvm_ver }}"
            echo "* putty ${{ needs.ubuntu2004.outputs.putty_ver }}"
            echo "* MobaXterm ${{ needs.ubuntu2004.outputs.mobaxterm_ver }}"
            echo "* winscp ${{ needs.ubuntu2004.outputs.winscp_ver }}"
            echo "* tig ${{ needs.ubuntu2004.outputs.tig_ver }} static"
            echo "* ctags nightly static"
          } | tee /tmp/note.md
          gh release delete tools -y || true
          git push origin :tools || true
          gh release create tools -t "tools" -F "/tmp/note.md" --target $GITHUB_SHA ./tools/*
